datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  walletAddress         String    @id @map("_id")
  chainId               String
  apiKey                String    @unique
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  name                  String?
  email                 String?
  bio                   String?
  avatar                String?
  language              String?
  theme                 String?
  notifications         Json?
  privacy               Json?
  twoFactor             Boolean   @default(false)
  defaultPaymentAddress String?
  paymentAddress        String?
  datasets              Dataset[]
  posts                 Post[]
  comments              Comment[]
  sessions              Session[]

  @@unique([walletAddress, email])
}

model Dataset {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String?
  fileKey           String?
  publicUrl         String?
  downloads         Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User?    @relation(fields: [userWalletAddress], references: [walletAddress])
  userWalletAddress String?
  tags              String[]
  isPublic          Boolean  @default(false)
  fileType          String?

  @@index([userWalletAddress])
  @@index([isPublic])
}

model Post {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  content             String
  category            String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  author              User      @relation(fields: [authorWalletAddress], references: [walletAddress])
  authorWalletAddress String
  comments            Comment[]
  likes               Int       @default(0)
  tags                String[]

  @@index([authorWalletAddress])
  @@index([category])
  @@index([tags])
}

model Comment {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  content             String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  author              User     @relation(fields: [authorWalletAddress], references: [walletAddress])
  authorWalletAddress String
  post                Post     @relation(fields: [postId], references: [id])
  postId              String   @db.ObjectId
  likes               Int      @default(0)

  @@index([authorWalletAddress])
  @@index([postId])
}

model Session {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userWalletAddress String
  token             String   @unique
  createdAt         DateTime @default(now())
  expiresAt         DateTime
  user              User     @relation(fields: [userWalletAddress], references: [walletAddress])

  @@index([userWalletAddress])
  @@index([expiresAt])
}