datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String                @id @default(auto()) @map("_id") @db.ObjectId
  walletAddress           String                @unique
  chainId                 String
  apiKey                  String                @unique
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  username                String                @unique
  name                    String?
  email                   String?
  bio                     String?
  avatar                  String?
  language                String?
  theme                   String?
  githubProfileLink       String?
  xProfileLink            String?
  discordProfileLink      String?
  linkedinProfileLink     String?
  defaultPaymentAddress   String?
  selectedPaymentAddress  String?
  twoFactorEnabled        Boolean               @default(false)
  notificationPreferences Json?
  privacySettings         Json?
 projects                 Project[]             @relation("UserProjects")
  repositories            Repository[]
  monetizationSettings    MonetizationSettings?
  datasets                Dataset[]
  posts                   Post[]                @relation("AuthorPosts")
  comments                Comment[]             @relation("AuthorComments")
  sessions                Session[]
  refreshTokens           RefreshToken[]
  lastLoginAt             DateTime?
  solanaAddress           String?               
  organizationMemberships OrganizationMember[]

  @@index([email])
}

model Organization {
  id                String               @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String?
  badge            String?
  websiteLink      String?
  linkedinOrgLink  String?
  discordServerLink String?
  organizatonLogo   String?
  twitterOrgLink   String?
  githubOrgLink    String?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  members          OrganizationMember[]
  projects         Project[]            @relation("OrganizationProjects")
}

model OrganizationMember {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
  role           String       @default("MEMBER") // e.g., "ADMIN", "MEMBER", etc.
  joinedAt       DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
}

enum ProfileVisibility {
  PUBLIC
  PRIVATE
}

model Project {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  link            String?
  status          String?       @default("ACTIVE") // e.g., "ACTIVE", "ARCHIVED", "COMPLETED"
  visibility      String        @default("PUBLIC") // "PUBLIC" or "PRIVATE"
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // User relationship (optional)
  userId          String?       @db.ObjectId
  user            User?         @relation("UserProjects", fields: [userId], references: [id])
  
  // Organization relationship (optional)
  organizationId  String?       @db.ObjectId
  organization    Organization? @relation("OrganizationProjects", fields: [organizationId], references: [id])

  @@index([userId])
  @@index([organizationId])
  @@index([visibility])
}

model Repository {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  link   String
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model MonetizationSettings {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  userId           String    @unique @db.ObjectId
  user             User      @relation(fields: [userId], references: [id])
  paymentMethod    String?
  paymentChainId   String?
  subscriptionTier String?
  subscriptionStatus String  @default("inactive")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastPaymentDate  DateTime?
}

model Dataset {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String?
  fileKey           String?
  publicUrl         String?
  downloads         Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User?    @relation(fields: [userWalletAddress], references: [walletAddress])
  userWalletAddress String?
  tags              String[]
  isPublic          Boolean  @default(false)
  fileType          String?

  @@index([userWalletAddress])
  @@index([isPublic])
}

model Post {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  content             String
  category            String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  author              User      @relation("AuthorPosts", fields: [authorWalletAddress], references: [walletAddress])
  authorWalletAddress String
  comments            Comment[]
  likes               Int       @default(0)
  tags                String[]

  @@index([authorWalletAddress])
  @@index([category])
  @@index([tags])
}

model Comment {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  content             String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  author              User     @relation("AuthorComments", fields: [authorWalletAddress], references: [walletAddress])
  authorWalletAddress String
  post                Post     @relation(fields: [postId], references: [id])
  postId              String   @db.ObjectId
  likes               Int      @default(0)

  @@index([authorWalletAddress])
  @@index([postId])
}

model Session {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userWalletAddress String
  user              User     @relation(fields: [userWalletAddress], references: [walletAddress])
  token             String   @unique
  createdAt         DateTime @default(now())
  expiresAt         DateTime
  lastActivity      DateTime @default(now())
  ipAddress         String?
  userAgent         String?
  deviceInfo        Json?
  isValid           Boolean  @default(true)

  @@index([userWalletAddress])
  @@index([expiresAt])
  @@index([isValid])
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
  isRevoked Boolean  @default(false)

  @@index([userId])
  @@index([expiresAt])
}
