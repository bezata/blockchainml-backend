// Database configuration
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ==============================
// User & Authentication Models
// ==============================

/// User model representing a registered user
model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  walletAddress String  @unique
  chainId       String
  apiKey        String  @unique
  username      String  @unique
  name          String?
  email         String?
  bio           String?
  avatar        String?

  // User preferences
  language                String?
  theme                   String?
  notificationPreferences Json?
  privacySettings         Json?

  // Social links
  githubProfileLink   String?
  xProfileLink        String?
  discordProfileLink  String?
  linkedinProfileLink String?

  // Payment info
  defaultPaymentAddress  String?
  selectedPaymentAddress String?
  solanaAddress          String?

  // Features
  twoFactorEnabled Boolean @default(false)
  hasOrganization  Boolean @default(false)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relations
  projects                Project[]             @relation("UserProjects")
  repositories            Repository[]
  monetizationSettings    MonetizationSettings?
  datasets                Dataset[]
  posts                   Post[]                @relation("AuthorPosts")
  comments                Comment[]             @relation("AuthorComments")
  sessions                Session[]
  refreshTokens           RefreshToken[]
  organizationMemberships OrganizationMember[]
  followingOrganizations OrganizationFollower[] @relation("UserFollowingOrganizations")
  notifications           UserNotification[]

  @@index([email])
}

model UserNotification {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.ObjectId
  type       String
  title      String
  message    String
  data       Json?
  sourceType String // e.g., "ORGANIZATION", "PROJECT", "SYSTEM", etc.
  sourceId   String?   @db.ObjectId
  isRead     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  readAt     DateTime?

  @@index([userId])
  @@index([sourceType, sourceId])
  @@index([createdAt])
  @@index([isRead])
}

/// Session management for user authentication
model Session {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userWalletAddress String
  user              User     @relation(fields: [userWalletAddress], references: [walletAddress])
  token             String   @unique
  createdAt         DateTime @default(now())
  expiresAt         DateTime
  lastActivity      DateTime @default(now())
  ipAddress         String?
  userAgent         String?
  deviceInfo        Json?
  isValid           Boolean  @default(true)

  @@index([userWalletAddress])
  @@index([expiresAt])
  @@index([isValid])
}

/// Refresh tokens for JWT authentication
model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
  isRevoked Boolean  @default(false)

  @@index([userId])
  @@index([expiresAt])
}

// ==============================
// Organization Models
// ==============================

/// Organization entity
model Organization {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?
  badge       String?

  // Social and web presence
  websiteLink       String?
  linkedinOrgLink   String?
  discordServerLink String?
  organizationLogo  String?
  twitterOrgLink    String?
  githubOrgLink     String?

  // Organization settings
  isArchived     Boolean @default(false)
  visibility     String  @default("PUBLIC")
  revenueSharing Json?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members                  OrganizationMember[]
  projects                 Project[]                  @relation("OrganizationProjects")
  roles                    OrganizationRole[]
  OrganizationActivity     OrganizationActivity[]
  OrganizationNotification OrganizationNotification[]
  followers                OrganizationFollower[]     @relation("OrganizationFollowers")

  @@index([visibility])
}

model OrganizationActivity {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId
  actorId        String       @db.ObjectId
  actorRole      String
  action         String
  details        Json?
  metadata       Json?
  createdAt      DateTime     @default(now())

  @@index([organizationId])
  @@index([createdAt])
}

model OrganizationNotification {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId
  recipientId    String       @db.ObjectId
  type           String
  title          String
  message        String
  data           Json?
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  readAt         DateTime?

  @@index([organizationId])
  @@index([recipientId])
  @@index([createdAt])
}

/// Organization member relationship
model OrganizationMember {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String           @db.ObjectId
  user           User             @relation(fields: [userId], references: [id])
  userId         String           @db.ObjectId
  role           OrganizationRole @relation(fields: [roleId], references: [id])
  roleId         String           @db.ObjectId
  joinedAt       DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
  @@index([roleId])
}

/// Organization roles and permissions
model OrganizationRole {
  id             String               @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  organization   Organization         @relation(fields: [organizationId], references: [id])
  organizationId String               @db.ObjectId
  permissions    Json // Store permissions as JSON
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  members        OrganizationMember[]

  @@unique([organizationId, name])
  @@index([organizationId])
}

// ==============================
// Content Models
// ==============================

/// Projects created by users or organizations
model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  link        String?
  status      String?  @default("ACTIVE") // e.g., "ACTIVE", "ARCHIVED", "COMPLETED"
  visibility  String   @default("PUBLIC")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId         String?       @db.ObjectId
  user           User?         @relation("UserProjects", fields: [userId], references: [id])
  organizationId String?       @db.ObjectId
  organization   Organization? @relation("OrganizationProjects", fields: [organizationId], references: [id])

  @@index([userId])
  @@index([organizationId])
  @@index([visibility])
}

/// Code repositories
model Repository {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  link   String
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

/// Datasets uploaded by users
model Dataset {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  fileKey     String?
  publicUrl   String?
  downloads   Int      @default(0)
  fileType    String?
  tags        String[]
  isPublic    Boolean  @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user              User?   @relation(fields: [userWalletAddress], references: [walletAddress])
  userWalletAddress String?

  @@index([userWalletAddress])
  @@index([isPublic])
}

// ==============================
// Social Models
// ==============================

/// Blog posts
model Post {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  content  String
  category String
  tags     String[]
  likes    Int      @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author              User      @relation("AuthorPosts", fields: [authorWalletAddress], references: [walletAddress])
  authorWalletAddress String
  comments            Comment[]

  @@index([authorWalletAddress])
  @@index([category])
  @@index([tags])
}

/// Comments on posts
model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  likes   Int    @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author              User   @relation("AuthorComments", fields: [authorWalletAddress], references: [walletAddress])
  authorWalletAddress String
  post                Post   @relation(fields: [postId], references: [id])
  postId              String @db.ObjectId

  @@index([authorWalletAddress])
  @@index([postId])
}

// ==============================
// Payment Models
// ==============================

/// User monetization settings
model MonetizationSettings {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  paymentMethod      String?
  paymentChainId     String?
  subscriptionTier   String?
  subscriptionStatus String    @default("inactive")
  lastPaymentDate    DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

// Additional enums
enum ProfileVisibility {
  PUBLIC
  PRIVATE
}

// Add new model for Organization Followers
model OrganizationFollower {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  organization   Organization @relation("OrganizationFollowers", fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId
  user           User         @relation("UserFollowingOrganizations", fields: [userId], references: [id])
  userId         String       @db.ObjectId
  followedAt     DateTime     @default(now())

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
}
